#uses the edited_speed_glm_L1 and edited_L1_speedglm.wfit to perform a Wald Test and to predict the outcome
#will return pval and odds ratio as a data frame

mvGSEA <- function(y,X=X_new_,v=v,conf=conf)
{
confounders_column <- c()
  if( !is.null(conf)){ #if there ARE confounders
    confounders_column <- pmatch(conf, dimnames(X)[[2]])} #find which columns are confounders
  newX <- c()
 if ( !is.null(confounders_column)){
   newX <- X[,-confounders_column]} #updated X, taking the confounders out
  
  #----------perform glm depending on the confounders
  if(is.null(conf)){
   model <- edited_speedglm_L1(y~X, drop.unused.levels = FALSE)}
    
  if(!is.null(conf)){
   model <- edited_speedglm_L1(y~newX*X[,confounders_column], drop.unused.levels=FALSE)
  }
 
  model
  
  
  #------------using only the v's selected---get pval
  selected_v_column <- c()
  if(!is.null(v)){
    selected_v_column <- pmatch(v, dimnames(X)[[2]])
  }else{
    selected_v_column <- seq(1:ncol(X))
 }
  
  Sigma <- vcov.speedglm(model)
  Sigmacol <- colnames(Sigma)
  if(!is.null(v)){
  v_ <- paste(v, collapse='|')
  } else{
    v_ <- paste(colnames(X), collapse='|')
  }
Terms <- grep(v_, Sigmacol)


 wald <- aod::wald.test(b=coef.speedglm(model), Sigma = Sigma, Terms=Terms )


 #'Terms' elements correspond to the columns or rows of the var-cov matrix 
 
  p.val <- wald$result$chi2[3]


  #predict
 predict_model <- predict.speedglm(model, data.frame(X), type = "response")
 predict_model
 predict_model_fit <- ifelse(predict_model > 0.5,1,0)
  
  

  
  #odds ratio
  predict_model_fit_ <- ifelse(predict_model_fit==1, "Yes", "No")
 data_predict <- factor(predict_model_fit_, levels = c("Yes", "No"))
 y_ <- ifelse(y==1, "Yes", "No")
  data_y_ <- factor(y_, levels = c("Yes", "No"))
  contingency_table <- table(data_predict, data_y_)
  contingency_table
  
 oddsr <- (contingency_table[1, 1] / contingency_table[2,1]) / (contingency_table[1,2] / contingency_table[2, 2])
  
 
 #pred <- ROCR::prediction(predict_model_fit, y) #need ROCR package

  
  #return a row
  data.frame(p.val, oddsr)
  
}
